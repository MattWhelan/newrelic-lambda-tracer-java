AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20

Resources:
  # Since the DTCallerFunction's definition depends on the ApiGatewayApiCallee, it needs to be separate from the ApiGatewayApiCaller, to avoid circular dependencies
  ApiGatewayApiCallee:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
  ApiGatewayApiCaller:
    Type: AWS::Serverless::Api
    Properties:
      StageName: testing
  DTCalleeFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: DTCalleeFunction
      Handler: com.example.DTCalleeFunction::handleRequest
      Runtime: java8
      MemorySize: 512
      # SAM templates make it easy to bind a Lambda function to an API Gateway resource. Managing them together in a single template helps maintain consistency across the application.
      Events:
        CalleeApi:
          Type: Api
          Properties:
            Path: /dt-callee
            Method: get
            RestApiId:
              Ref: ApiGatewayApiCallee
  DTCallerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DTCallerFunction
      Handler: com.example.DTCallerFunction::handleRequest
      Runtime: java8
      MemorySize: 512
      Environment:
        Variables:
          # This environment variable's value depends on the generated identifier for the ApiGatewayApiCallee resource. Tying together these dependencies is one of the strengths of SAM templates.
          API_GATEWAY_PROXY_URL: !Sub https://${ApiGatewayApiCallee}.execute-api.${AWS::Region}.amazonaws.com/testing/dt-callee
      Events:
        CallerApi:
          Type: Api
          Properties:
            Path: /dt-caller
            Method: get
            RestApiId:
              Ref: ApiGatewayApiCaller
# Outputs print their value when the template is deployed. More importantly, the value can be imported and used in other templates.
Outputs:
  CallerEndpoint:
    Description: "New Relic DT example testing stage caller endpoint"
    Value: !Sub https://${ApiGatewayApiCaller}.execute-api.${AWS::Region}.amazonaws.com/testing/dt-caller
